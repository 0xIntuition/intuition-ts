{"version":3,"file":"misc-CusaSfkD.js","sources":["../../../app/lib/utils/misc.tsx"],"sourcesContent":["import React from 'react'\n\nimport { Icon, IconName, Text, Theme } from '@0xintuition/1ui'\n\nimport { SubmitFunction } from '@remix-run/react'\nimport { clsx, type ClassValue } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\nimport { formatUnits } from 'viem'\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport const themes: Array<Theme> = Object.values(Theme)\n\nexport function isTheme(value: unknown): value is Theme {\n  return typeof value === 'string' && themes.includes(value as Theme)\n}\n\n/**\n * Provide a condition and if that condition is falsey, this throws an error\n * with the given message.\n *\n * inspired by invariant from 'tiny-invariant' except will still include the\n * message in production.\n *\n * @example\n * invariant(typeof value === 'string', `value must be a string`)\n *\n * @param condition The condition to check\n * @param message The message to throw (or a callback to generate the message)\n * @param responseInit Additional response init options if a response is thrown\n *\n * @throws {Error} if condition is falsey\n */\nexport function invariant(\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  condition: any,\n  message: string | (() => string),\n): asserts condition {\n  if (!condition) {\n    throw new Error(typeof message === 'function' ? message() : message)\n  }\n}\n\nexport function getErrorMessage(error: unknown) {\n  if (typeof error === 'string') {\n    return error\n  }\n  if (\n    error &&\n    typeof error === 'object' &&\n    'message' in error &&\n    typeof error.message === 'string'\n  ) {\n    return error.message\n  }\n  console.error('Unable to get error message for error', error)\n  return 'Unknown Error'\n}\n\nexport function pascalCaseString(str: string): string {\n  return str.replace(/^[a-z]/, (chr) => chr.toUpperCase())\n}\n\nexport function sliceString(\n  id: string | undefined,\n  startNum: number,\n  endNum?: number,\n  maxLength?: number,\n) {\n  if (id && maxLength && id.length <= maxLength) {\n    return id\n  }\n\n  if (endNum === undefined) {\n    endNum = startNum\n  }\n  return `${id?.slice(0, startNum)}...${id?.slice(-endNum)}`\n}\n\nexport function truncateString(str: string, maxLength: number): string {\n  if (str.length <= maxLength) {\n    return str\n  }\n  return `${str.slice(0, maxLength)}...`\n}\n\nexport async function copyToClipboard(text: string) {\n  await navigator.clipboard.writeText(text)\n}\n\nexport function parseMessage(message: string) {\n  const parsedMessage = message.charAt(0).toUpperCase() + message.slice(1)\n  return parsedMessage\n}\n\nexport function getAuthHeaders(token?: string) {\n  const headers: HeadersInit = {\n    'Content-Type': 'application/json',\n  }\n\n  if (token) {\n    headers.authorization = `Bearer ${token}`\n  }\n\n  return headers\n}\n\n// delay helper for use with mocking async requests\nexport function delay(ms: number | undefined) {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\n// Not working\nexport function useUpdateQueryStringValueWithoutNavigation(\n  queryKey: string,\n  queryValue: string,\n) {\n  React.useEffect(() => {\n    const currentSearchParams = new URLSearchParams(window.location.search)\n    const oldQuery = currentSearchParams.get(queryKey) ?? ''\n    if (queryValue === oldQuery) {\n      return\n    }\n\n    if (queryValue) {\n      currentSearchParams.set(queryKey, queryValue)\n    } else {\n      currentSearchParams.delete(queryKey)\n    }\n    const newUrl = [window.location.pathname, currentSearchParams.toString()]\n      .filter(Boolean)\n      .join('?')\n    // alright, let's talk about this...\n    // Normally with remix, you'd update the params via useSearchParams from react-router-dom\n    // and updating the search params will trigger the search to update for you.\n    // However, it also triggers a navigation to the new url, which will trigger\n    // the loader to run which we do not want because all our data is already\n    // on the client and we're just doing client-side filtering of data we\n    // already have. So we manually call `window.history.pushState` to avoid\n    // the router from triggering the loader.\n    window.history.replaceState(null, '', newUrl)\n  }, [queryKey, queryValue])\n}\n\nexport function combineHeaders(\n  ...headers: Array<ResponseInit['headers'] | null | undefined>\n) {\n  const combined = new Headers()\n  for (const header of headers) {\n    if (!header) {\n      continue\n    }\n    for (const [key, value] of new Headers(header).entries()) {\n      combined.append(key, value)\n    }\n  }\n  return combined\n}\n\nconst formatNumber = (n: number, precision: number): string => {\n  if (Math.abs(n) < 1e-10) {\n    return '0'\n  }\n\n  let result = n.toFixed(precision)\n\n  // Remove trailing zeros after the decimal point\n  result = result.replace(/\\.?0+$/, '')\n\n  // If all digits after the decimal are zero, remove the decimal point\n  if (result.indexOf('.') !== -1 && !result.split('.')[1]) {\n    result = result.split('.')[0]\n  }\n\n  return result\n}\n\nexport const formatBalance = (\n  balance: bigint | string | number,\n  decimals = 18,\n): string => {\n  const formattedBalance = formatUnits(BigInt(balance), decimals)\n  const numBalance = +formattedBalance\n\n  if (numBalance === 0 || numBalance < 1e-10) {\n    return '0'\n  }\n\n  for (let i = 4; i <= 10; i++) {\n    const formatted = formatNumber(numBalance, i)\n    if (formatted !== '0') {\n      return formatted\n    }\n  }\n\n  return '0'\n}\n\nexport const formatDisplayBalance = (\n  balance: number | bigint,\n  maxInt?: number,\n) =>\n  new Intl.NumberFormat('en-US', {\n    notation: 'compact',\n    compactDisplay: 'short',\n    maximumSignificantDigits: maxInt ?? 6,\n  }).format(balance)\n\nexport function calculatePercentageOfTvl(\n  positionAssets: string,\n  totalAssets: string,\n) {\n  const position = +formatUnits(BigInt(positionAssets), 18)\n  const total = +formatUnits(BigInt(totalAssets ?? '0'), 18)\n  const percentage = ((position / total) * 100).toFixed(2)\n  return percentage\n}\n\nexport function calculateTotalPages(total: number, limit: number) {\n  return Math.ceil(total / limit)\n}\n\nexport const renderTooltipIcon = (icon: React.ReactNode | string) => {\n  if (typeof icon === 'string') {\n    return <img src={icon} className=\"h-4 w-4\" alt=\"Icon\" />\n  }\n  return icon\n}\n\n// this replaces the node module `crypto` which is causing issues (known issue)\n// the polyfill was also causing issues\n\nexport function getRandomBytes(size: number) {\n  if (\n    typeof window !== 'undefined' &&\n    window.crypto &&\n    window.crypto.getRandomValues\n  ) {\n    return window.crypto.getRandomValues(new Uint8Array(size))\n  }\n  throw new Error(\n    'Secure random bytes generation is not supported in this environment',\n  )\n}\n\nexport function calculatePercentageGain(\n  delta: number,\n  totalValue: number,\n): number {\n  const originalValue = totalValue - delta\n  if (originalValue === 0) {\n    return 0\n  }\n  return (delta / originalValue) * 100\n}\n\nexport function pluralize(\n  count: number,\n  singular: string,\n  plural: string = `${singular}s`,\n): string {\n  return `${count} ${count === 1 ? singular : plural}`\n}\n\nexport const truncateNumber = (balance: string | number): string => {\n  const n = Number(\n    typeof balance === 'string' ? balance.replace(/,/g, '') : balance,\n  )\n  if (isNaN(n)) {\n    console.error('Invalid number input:', balance)\n    return 'Invalid number'\n  }\n  const format = (num: number, divisor: number, suffix: string) =>\n    `${(num / divisor).toFixed(2).replace(/\\.?0+$/, '')}${suffix}`\n\n  if (n >= 1000000000) {\n    return format(n, 1000000000, 'B')\n  }\n  if (n >= 1000000) {\n    return format(n, 1000000, 'M')\n  }\n  if (n >= 1000) {\n    return format(n, 1000, 'K')\n  }\n  return n.toFixed(2).replace(/\\.?0+$/, '')\n}\n\nexport interface DataErrorDisplayProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  message?: string\n}\n\nexport const DataErrorDisplay = ({\n  message = 'An error occured',\n  children,\n}: DataErrorDisplayProps) => {\n  return (\n    <div className=\"flex flex-col justify-center items-center p-6 theme-border border-destructive/50 rounded-lg min-h-52 bg-destructive/10\">\n      <Icon\n        name={IconName.triangleExclamation}\n        className=\"w-12 h-12 mb-4 text-destructive\"\n      />\n      <Text variant=\"caption\" className=\"text-foreground mb-5\">\n        {message}\n      </Text>\n      {children}\n    </div>\n  )\n}\n\ninterface LoadMoreParams {\n  currentPage: number\n  pagination: {\n    limit: number\n  }\n  sortBy: string\n  direction: string\n  submit: SubmitFunction\n}\n\nexport function loadMore({\n  currentPage,\n  pagination,\n  sortBy,\n  direction,\n  submit,\n}: LoadMoreParams): () => void {\n  return () => {\n    const nextPage = currentPage + 1\n    const effectiveLimit = nextPage * pagination.limit\n    submit(\n      {\n        page: nextPage.toString(),\n        limit: pagination.limit.toString(),\n        effectiveLimit: effectiveLimit.toString(),\n        sortBy,\n        direction,\n      },\n      { method: 'get', replace: true },\n    )\n  }\n}\n\nexport const calculatePointsFromFees = (totalProtocolFees: string): number => {\n  const feesInEth = formatUnits(BigInt(totalProtocolFees), 18)\n  const pointsPerEth = 10000000\n  return Number(feesInEth) * pointsPerEth\n}\n"],"names":["cn","inputs","twMerge","clsx","Theme"],"mappings":"iFASO,SAASA,KAAMC,EAAsB,CACnC,OAAAC,EAAQC,EAAKF,CAAM,CAAC,CAC7B,CAEoC,OAAO,OAAOG,CAAK"}