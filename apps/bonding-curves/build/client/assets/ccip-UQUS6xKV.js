import{B as l,g as h,s as y,d as k,i as b,c as E,a as L,e as O,H as m,b as x}from"./_index-CjPjdpAJ.js";import"./index-_ym_c-sR.js";import"@radix-ui/react-slot";import"@radix-ui/react-dialog";import"@radix-ui/react-avatar";import"@radix-ui/react-checkbox";import"@radix-ui/react-hover-card";import"@radix-ui/react-context-menu";import"@radix-ui/react-dropdown-menu";import"@radix-ui/react-label";import"@radix-ui/react-popover";class M extends l{constructor({callbackSelector:s,cause:e,data:o,extraData:c,sender:d,urls:t}){var i;super(e.shortMessage||"An error occurred while fetching for an offchain result.",{cause:e,metaMessages:[...e.metaMessages||[],(i=e.metaMessages)!=null&&i.length?"":[],"Offchain Gateway Call:",t&&["  Gateway URL(s):",...t.map(p=>`    ${h(p)}`)],`  Sender: ${d}`,`  Data: ${o}`,`  Callback selector: ${s}`,`  Extra data: ${c}`].flat(),name:"OffchainLookupError"})}}class R extends l{constructor({result:s,url:e}){super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:[`Gateway URL: ${h(e)}`,`Response: ${y(s)}`],name:"OffchainLookupResponseMalformedError"})}}class $ extends l{constructor({sender:s,to:e}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${e}`,`OffchainLookup sender address: ${s}`],name:"OffchainLookupSenderMismatchError"})}}const _="0x556f1830",S={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};async function F(n,{blockNumber:s,blockTag:e,data:o,to:c}){const{args:d}=k({data:o,abi:[S]}),[t,i,p,a,r]=d,{ccipRead:f}=n,g=f&&typeof(f==null?void 0:f.request)=="function"?f.request:q;try{if(!b(c,t))throw new $({sender:t,to:c});const u=await g({data:p,sender:t,urls:i}),{data:w}=await E(n,{blockNumber:s,blockTag:e,data:L([a,O([{type:"bytes"},{type:"bytes"}],[u,r])]),to:c});return w}catch(u){throw new M({callbackSelector:a,cause:u,data:o,extraData:r,sender:t,urls:i})}}async function q({data:n,sender:s,urls:e}){var c;let o=new Error("An unknown error occurred.");for(let d=0;d<e.length;d++){const t=e[d],i=t.includes("{data}")?"GET":"POST",p=i==="POST"?{data:n,sender:s}:void 0;try{const a=await fetch(t.replace("{sender}",s).replace("{data}",n),{body:JSON.stringify(p),method:i});let r;if((c=a.headers.get("Content-Type"))!=null&&c.startsWith("application/json")?r=(await a.json()).data:r=await a.text(),!a.ok){o=new m({body:p,details:r!=null&&r.error?y(r.error):a.statusText,headers:a.headers,status:a.status,url:t});continue}if(!x(r)){o=new R({result:r,url:t});continue}return r}catch(a){o=new m({body:p,details:a.message,url:t})}}throw o}export{q as ccipRequest,F as offchainLookup,S as offchainLookupAbiItem,_ as offchainLookupSignature};
