FROM docker.io/node:lts-alpine as base

ARG PINATA_JWT_KEY
ARG PINATA_GATEWAY_KEY
ARG IPFS_GATEWAY
ARG ATTEST_CONTRACT_ADDRESS
ARG ATTEST_CONTRACT_ADDRESS_DEV
ARG MULTIVAULT_CONTRACT_ADDRESS
ARG MULTIVAULT_CONTRACT_ADDRESS_DEV
ARG PRIVATE_KEY
ARG PRIVATE_KEY_DEV
ARG EVM_RPC
ARG EVM_RPC_DEV
ARG ADDITIONAL_STAKE_ATOM
ARG ADDITIONAL_STAKE_TRIPLE
ARG CLOUDINARY_CLOUD_NAME
ARG CLOUDINARY_API_KEY
ARG CLOUDINARY_API_SECRET
ARG SUPABASE_URL
ARG SUPABASE_KEY
ARG ENVIRONMENT
ARG VITE_DEPLOY_ENV
ARG MULTIVAULT_ADDRESS_BASE_SEPOLIA
ARG MULTIVAULT_ADDRESS_BASE_MAINNET
ARG ALCHEMY_BASE_SEPOLIA_RPC_URL
ARG ALCHEMY_BASE_RPC_URL
ARG SESSION_SECRET
ARG ORIGIN_URL
ARG PRIVY_APP_ID
ARG PRIVY_AUTH_URL
ARG PRIVY_APP_SECRET

ENV PINATA_JWT_KEY=${PINATA_JWT_KEY}
ENV PINATA_GATEWAY_KEY=${PINATA_GATEWAY_KEY}
ENV IPFS_GATEWAY=${IPFS_GATEWAY}
ENV ATTEST_CONTRACT_ADDRESS=${ATTEST_CONTRACT_ADDRESS}
ENV ATTEST_CONTRACT_ADDRESS_DEV=${ATTEST_CONTRACT_ADDRESS_DEV}
ENV MULTIVAULT_CONTRACT_ADDRESS=${MULTIVAULT_CONTRACT_ADDRESS}
ENV MULTIVAULT_CONTRACT_ADDRESS_DEV=${MULTIVAULT_CONTRACT_ADDRESS_DEV}
ENV PRIVATE_KEY=${PRIVATE_KEY}
ENV PRIVATE_KEY_DEV=${PRIVATE_KEY_DEV}
ENV EVM_RPC=${EVM_RPC}
ENV EVM_RPC_DEV=${EVM_RPC_DEV}
ENV ADDITIONAL_STAKE_ATOM=${ADDITIONAL_STAKE_ATOM}
ENV ADDITIONAL_STAKE_TRIPLE=${ADDITIONAL_STAKE_TRIPLE}
ENV CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
ENV CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
ENV CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
ENV SUPABASE_URL=${SUPABASE_URL}
ENV SUPABASE_KEY=${SUPABASE_KEY}
ENV ENVIRONMENT=${ENVIRONMENT}
ENV VITE_DEPLOY_ENV=${VITE_DEPLOY_ENV}
ENV MULTIVAULT_ADDRESS_BASE_SEPOLIA=${MULTIVAULT_ADDRESS_BASE_SEPOLIA}
ENV MULTIVAULT_ADDRESS_BASE_MAINNET=${MULTIVAULT_ADDRESS_BASE_MAINNET}
ENV ALCHEMY_BASE_SEPOLIA_RPC_URL=${ALCHEMY_BASE_SEPOLIA_RPC_URL}
ENV ALCHEMY_BASE_RPC_URL=${ALCHEMY_BASE_RPC_URL}
ENV SESSION_SECRET=${SESSION_SECRET}
ENV ORIGIN_URL=${ORIGIN_URL}
ENV PRIVY_APP_ID=${PRIVY_APP_ID}
ENV PRIVY_AUTH_URL=${PRIVY_AUTH_URL}
ENV PRIVY_APP_SECRET=${PRIVY_APP_SECRET}

WORKDIR /app

# Copy the entire context
COPY . .

# Install necessary packages
RUN apk add --no-cache \
    python3 \
    make \
    gcc \
    g++

RUN npm install -g pnpm@9.0.6

# Build stage
FROM base as build

# Install nx globally
RUN npm install -g nx@latest

# Install dependencies
RUN pnpm install --no-frozen-lockfile

# Build the data-populator app
RUN pnpm run data-populator:build

# Production stage
FROM base

# Copy built files from the build stage
COPY --from=build /app /app

# Set environment variables for NX
ENV NX_REJECT_UNKNOWN_LOCAL_CACHE=0
ENV PORT=8080
ENV HOST=0.0.0.0

# Expose the application port
EXPOSE 8080

# Start the application
CMD [ "pnpm", "run", "data-populator:start" ]
