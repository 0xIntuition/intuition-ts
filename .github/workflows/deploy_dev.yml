name: Deploy Portal to Dev

on:
  push:
    branches:
      - main

jobs:
  deploy-dev:
    name: Deploy to Dev
    runs-on: ubuntu-latest
    env:
      ENV: development
      CLUSTER_NAME: systems-intuition-dev-cluster
      SERVICE_NAME: portal-intuition-dev
      ECR_IMAGE: ${{ secrets.AWS_ACCOUNT }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/portal-dev:latest
      SECRETS_MANAGER: arn:aws:secretsmanager:us-west-2:064662847354:secret:portal.dev-9XdIU9

    steps:
      - name: Check if important variables are set
        shell: bash
        run: |
          if [[ ${{ secrets.AWS_ACCESS_KEY_ID }} == '' ]]; then
            echo "secret AWS_ACCESS_KEY_ID not set"
            exit 1
          fi
          if [[ ${{ secrets.AWS_SECRET_ACCESS_KEY }} == '' ]]; then
            echo "secret AWS_SECRET_ACCESS_KEY not set"
            exit 1
          fi
          if [[ ${{ secrets.AWS_ACCOUNT }} == '' ]]; then
            echo "secret AWS_ACCOUNT not set"
            exit 1
          fi

      - name: Print variables
        shell: bash
        run: |
          echo "ENV=${{ env.ENV }}"
          echo "CLUSTER_NAME=${{ env.CLUSTER_NAME }}"
          echo "SERVICE_NAME=${{ env.SERVICE_NAME }}"
          echo "ECR_IMAGE=${{ env.ECR_IMAGE }}"
          echo "SECRETS_MANAGER=${{ env.SECRETS_MANAGER }}"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9.0.6

      - name: Install dependencies
        run: pnpm install

      - name: Run codegen for API package
        run: API_URL=https://dev.api.intuition.systems pnpm run codegen

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true

      - name: Build, tag, and push image to AWS ECR
        run: |
          docker build --platform linux/x86_64 -t portal -f apps/portal/Dockerfile . \
          --build-arg VITE_DEPLOY_ENV=${{ env.ENV }} \
          --build-arg SECRETS_MANAGER=${{ env.SECRETS_MANAGER }}
          --build-arg AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
          --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
          --build-arg AWS_REGION=${{ secrets.AWS_REGION }}
          docker tag portal ${{ env.ECR_IMAGE }}
          docker push ${{ env.ECR_IMAGE }}

      - name: Download task definition
        shell: bash
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.SERVICE_NAME }} --query taskDefinition > task-definition.json

      - name: Render Amazon ECS task definition
        id: render-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: portal
          image: ${{ env.ECR_IMAGE }}
          environment-variables: |
            AWS_REGION=${{ secrets.AWS_REGION }}
            AWS_ACCOUNT=${{ secrets.AWS_ACCOUNT }}

      - name: Deploy task definition to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-container.outputs.task-definition }}
          service: ${{ env.SERVICE_NAME }}
          cluster: ${{ env.CLUSTER_NAME }}
          wait-for-service-stability: true
