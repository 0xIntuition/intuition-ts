version: '3'
services:
  anvil:
    build:
      context: .
    ports:
      - '8545:8545'

  firehose:
    image: ghcr.io/streamingfast/firehose-ethereum
    ports:
      - '9000:9000' # Substreams tier 1 gRPC port
    volumes:
      - data_fh:/data
    command:
      - start
      - reader-node,merger,relayer,firehose,substreams-tier1,substreams-tier2
      - --data-dir=/data
      - --config-file=
      - --log-format=text
      - --log-to-file=false
      - --common-first-streamable-block=1
      - --reader-node-path=fireeth
      - --reader-node-arguments=tools poller generic-evm http://anvil:8545 0 --data-dir=/data
      - --substreams-tier1-grpc-listen-addr=:9000

  graph-node:
    image: graphprotocol/graph-node
    ports:
      - '8000:8000'
      - '8001:8001'
      - '8020:8020'
      - '8030:8030'
      - '8040:8040'
    depends_on:
      - ipfs
      - postgres
      - anvil
    extra_hosts:
      - host.docker.internal:host-gateway
    environment:
      postgres_host: postgres
      postgres_user: graph-node
      postgres_pass: let-me-in
      postgres_db: graph-node
      ipfs: 'ipfs:5001'
      ethereum: 'mainnet:http://anvil:8545'
      GRAPH_LOG: info
      GRAPH_ALLOW_NON_DETERMINISTIC_IPFS: true

  ipfs:
    image: ipfs/kubo:v0.17.0
    ports:
      - '5001:5001'
    volumes:
      - data_ipfs:/data/ipfs

  postgres:
    image: postgres:14
    ports:
      - '5432:5432'
    command:
      [
        'postgres',
        '-cshared_preload_libraries=pg_stat_statements',
        '-cmax_connections=200',
      ]
    environment:
      POSTGRES_USER: graph-node
      POSTGRES_PASSWORD: let-me-in
      POSTGRES_DB: graph-node
      # FIXME: remove this env. var. which we shouldn't need. Introduced by
      # <https://github.com/graphprotocol/graph-node/pull/3511>, maybe as a
      # workaround for https://github.com/docker/for-mac/issues/6270?
      PGDATA: '/var/lib/postgresql/data'
      POSTGRES_INITDB_ARGS: '-E UTF8 --locale=C'
    volumes:
      - data_pg:/var/lib/postgresql/data

  graphql-engine:
    image: hasura/graphql-engine:v2.38.0
    ports:
      - '8080:8080'
    restart: always
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://graph-node:let-me-in@postgres:5432/graph-node?sslmode=disable
      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
      PG_DATABASE_URL: postgres://graph-node:let-me-in@postgres:5432/graph-node?sslmode=disable
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: 'true' # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: 'true'
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## uncomment next line to run console offline (i.e load console assets from server instead of CDN)
      # HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets
      ## uncomment next line to set an admin secret
      # HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
      HASURA_GRAPHQL_METADATA_DEFAULTS: '{"backend_configs":{"dataconnector":{"athena":{"uri":"http://data-connector-agent:8081/api/v1/athena"},"mariadb":{"uri":"http://data-connector-agent:8081/api/v1/mariadb"},"mysql8":{"uri":"http://data-connector-agent:8081/api/v1/mysql"},"oracle":{"uri":"http://data-connector-agent:8081/api/v1/oracle"},"snowflake":{"uri":"http://data-connector-agent:8081/api/v1/snowflake"}}}}'
    depends_on:
      data-connector-agent:
        condition: service_healthy

  data-connector-agent:
    image: hasura/graphql-data-connector:v2.38.0
    restart: always
    ports:
      - 8081:8081
    environment:
      QUARKUS_LOG_LEVEL: ERROR # FATAL, ERROR, WARN, INFO, DEBUG, TRACE
      ## https://quarkus.io/guides/opentelemetry#configuration-reference
      QUARKUS_OPENTELEMETRY_ENABLED: 'false'
      ## QUARKUS_OPENTELEMETRY_TRACER_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8081/api/v1/athena/health']
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 5s

  pgweb:
    container_name: pgweb
    image: sosedoff/pgweb:0.11.12
    restart: on-failure
    ports:
      - '8082:8081'
    command: ['pgweb', '--bind=0.0.0.0', '--listen=8081', '--binary-codec=hex']
    #command: ["pgweb", "--binary-codec=base58"]
    #command: ["pgweb", "--binary-codec=base64"]
    links:
      - postgres:postgres
    environment:
      - DATABASE_URL=postgres://graph-node:let-me-in@postgres:5432/graph-node?sslmode=disable
    depends_on:
      - postgres

volumes:
  data_fh:
  data_pg:
  data_ipfs:
