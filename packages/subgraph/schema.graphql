type Event @entity {
  id: Bytes!
  type: EventType!
  atom_id: Atom
  triple_id: Triple
  deposit_id: Deposit
  redemption_id: Redemption
  fee_transfer_id: FeeTransfer
  block_number: BigInt!
  block_timestamp: BigInt!
  transaction_hash: Bytes!
}

enum EventType {
  AtomCreated
  TripleCreated
  Deposited
  Redeemed
  FeesTransfered
}

type Atom @entity {
  id: ID!
  creator_id: Account!
  wallet_id: Account!
  uri: String!
  data: String!

  type: AtomType!
  emoji: String
  label: String
  image: String

  value_id: AtomValue

  vault_id: Vault!

  asSubject: [Triple!]! @derivedFrom(field: "subject_id")
  asPredicate: [Triple!]! @derivedFrom(field: "predicate_id")
  asObject: [Triple!]! @derivedFrom(field: "object_id")

  block_number: BigInt!
  block_timestamp: BigInt!
  transaction_hash: Bytes!
}

type Account @entity {
  id: ID!
  label: String
  image: String
  atom_id: Atom
  type: AccountType!
  createdAtoms: [Atom!]! @derivedFrom(field: "creator_id")
  createdTriples: [Triple!]! @derivedFrom(field: "creator_id")
  feeTransfers: [FeeTransfer!]! @derivedFrom(field: "sender_id")
  deposits: [Deposit!]! @derivedFrom(field: "sender_id")
  redemptions: [Redemption!]! @derivedFrom(field: "sender_id")
  positions: [Position!]! @derivedFrom(field: "account_id")
  signals: [Signal!]! @derivedFrom(field: "account_id")
}

enum AccountType {
  Default
  AtomWallet
  ProtocolVault
}

type Triple @entity {
  id: String!
  creator_id: Account!
  subject_id: Atom!
  predicate_id: Atom!
  object_id: Atom!

  vault_id: Vault!
  counter_vault_id: Vault!

  "vault.totalShares + inverseVault.totalShares"
  tvl: BigInt!

  block_number: BigInt!
  block_timestamp: BigInt!
  transaction_hash: Bytes!
}

enum AtomType {
  Unknown
  JSON
  Account
  Thing
  ThingPredicate
  Person
  PersonPredicate
  Organization
  OrganizationPredicate
  Book
  LikeAction
  FollowAction
  Keywords
}

type AtomValue @entity {
  id: ID!
  account_id: Account
  thing_id: Thing
  person_id: Person
  organization_id: Organization
  book_id: Book
}

type Thing @entity {
  id: ID!
  atom_id: Atom!
  name: String
  description: String
  image: String
  url: String
}

type Person @entity {
  id: ID!
  atom_id: Atom!
  identifier: String
  name: String
  description: String
  image: String
  email: String
  url: String
}

type Organization @entity {
  id: ID!
  atom_id: Atom!
  identifier: String
  name: String
  description: String
  image: String
  email: String
  url: String
}

type Book @entity {
  id: ID!
  atom_id: Atom!
  name: String
  description: String
  genre: String
  url: String
}

type Deposit @entity {
  id: Bytes!

  "initializer of the deposit"
  sender_id: Account!

  "beneficiary of the minted shares"
  receiver_id: Account!

  "total shares held by the receiver in the vault"
  receiver_total_shares_in_vault: BigInt!

  "total assets that go towards minting shares for the receiver"
  sender_assets_after_total_fees: BigInt!

  "total shares transferred"
  shares_for_receiver: BigInt!

  "fee amount collected for entering the vault"
  entry_fee: BigInt!

  "vault being deposited into"
  vault_id: Vault!

  "whether the vault is a triple vault or not"
  is_triple: Boolean!

  "whether the receiver is an atom wallet or not"
  is_atom_wallet: Boolean!

  block_number: BigInt!
  block_timestamp: BigInt!
  transaction_hash: Bytes!
}

type FeeTransfer @entity {
  id: Bytes!
  sender_id: Account!
  receiver_id: Account!
  amount: BigInt!
  block_number: BigInt!
  block_timestamp: BigInt!
  transaction_hash: Bytes!
}

type Redemption @entity {
  id: Bytes!

  "initializer of the withdrawal (owner of the shares)"
  sender_id: Account!

  "beneficiary of the withdrawn assets (can be different from the sender)"
  receiver_id: Account!

  "total shares held by the sender in the vault"
  sender_total_shares_in_vault: BigInt!

  "quantity of assets withdrawn by the receiver"
  assets_for_receiver: BigInt!

  "quantity of shares redeemed"
  shares_redeemed_by_sender: BigInt!

  "total fee amount collected for exiting the vault"
  exit_fee: BigInt!

  "vault being redeemed from"
  vault_id: Vault!

  block_number: BigInt!
  block_timestamp: BigInt!
  transaction_hash: Bytes!
}

type Vault @entity {
  id: ID!
  atom_id: Atom
  triple_id: Triple
  total_shares: BigInt!

  deposits: [Deposit!]! @derivedFrom(field: "vault_id")
  redemptions: [Redemption!]! @derivedFrom(field: "vault_id")
  positions: [Position!]! @derivedFrom(field: "vault_id")
}

type Position @entity {
  id: ID!
  account_id: Account!
  vault_id: Vault!
  shares: BigInt!
}

type Signal @entity {
  id: Bytes!

  delta: BigInt!

  "atom or triple (delta / tvl)"
  relative_strength: BigInt!

  account_id: Account!
  atom_id: Atom
  triple_id: Triple
  deposit_id: Deposit
  redemption_id: Redemption

  block_number: BigInt!
  block_timestamp: BigInt!
  transaction_hash: Bytes!
}

type AtomSignalData @entity(timeseries: true) {
  id: Int8!
  timestamp: Timestamp!
  atom_id: Atom!
  account_id: Account!
  delta: BigInt!
}

# type SignalStats
#   @aggregation(intervals: ["hour", "day"], source: "AtomSignalData") {
#   id: Int8!
#   timestamp: Timestamp!
#   atom: Atom!
#   account: Account!
#   totalSignal: BigInt! @aggregate(fn: "sum", arg: "delta")
#   count: Int8! @aggregate(fn: "count", cumulative: true)
# }
