# Main pagination query
query GetEvents(
  $limit: Int
  $offset: Int
  $orderBy: [events_order_by!]
  $where: events_bool_exp
  $addresses: [String!]
) {
  total: events_aggregate(where: $where) {
    aggregate {
      count
    }
  }
  events(limit: $limit, offset: $offset, order_by: $orderBy, where: $where) {
    ...EventDetails
    atom {
      vault {
        totalShares
        positionCount
        positions(where: { accountId: { _in: $addresses } }) {
          accountId
          shares
          account {
            id
            label
            image
          }
        }
        triple {
          vault {
            totalShares
            positionCount
            positions(where: { accountId: { _in: $addresses } }) {
              accountId
              shares
              account {
                id
                label
                image
              }
            }
          }
          counterVault {
            totalShares
            positionCount
            positions(where: { accountId: { _in: $addresses } }) {
              accountId
              shares
              account {
                id
                label
                image
              }
            }
          }
        }
      }
    }
  }
}

# Combined query with aggregates and nodes
query GetEventsWithAggregates(
  $limit: Int
  $offset: Int
  $orderBy: [events_order_by!]
  $where: events_bool_exp
  $addresses: [String!]
) {
  events_aggregate(
    where: $where
    limit: $limit
    offset: $offset
    order_by: $orderBy
  ) {
    aggregate {
      count
      max {
        blockTimestamp
        blockNumber
      }
      min {
        blockTimestamp
        blockNumber
      }
    }
    nodes {
      ...EventDetails
    }
  }
}

query GetEventsCount($where: events_bool_exp) {
  events_aggregate(where: $where) {
    aggregate {
      count
    }
  }
}

query GetEventsData($where: events_bool_exp) {
  events_aggregate(where: $where) {
    aggregate {
      count
      max {
        blockTimestamp
        blockNumber
      }
      min {
        blockTimestamp
        blockNumber
      }
      avg {
        blockNumber
      }
    }
  }
}

# Debug query with explicit address and position filtering
query GetDebugEvents($addresses: [String!]) {
  debug_events: events {
    id
    atom {
      vault {
        positions(where: { accountId: { _in: $addresses } }) {
          accountId
          shares
        }
      }
    }
  }
}
