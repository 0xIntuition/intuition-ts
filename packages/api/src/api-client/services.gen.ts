// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise'
import { OpenAPI } from './core/OpenAPI'
import { request as __request } from './core/request'
import type {
  AuthData,
  AuthResponse,
  CreateClaimData,
  CreateClaimResponse,
  CreateIdentityData,
  CreateIdentityResponse,
  CreatePositionData,
  CreatePositionResponse,
  CreateUserData,
  CreateUserResponse,
  DeleteUserData,
  DeleteUserResponse,
  GetAllResponse,
  GetAllUsersTotalsResponse,
  GetClaimByIdResponse,
  GetClaimPositionsResponse,
  GetIdentitiesData,
  GetIdentitiesResponse,
  GetIdentityByIdData,
  GetIdentityByIdResponse,
  GetIdentityPositionsResponse,
  GetPositionByIdResponse,
  GetQueryStructureResponse,
  GetUserByIdResponse,
  GetUserByWalletPublicResponse,
  GetUserByWalletResponse,
  GetUserIdentitiesResponse,
  GetUsersPositionsResponse,
  GetUsersResponse,
  GetUserTotalsResponse,
  RefreshData,
  RefreshResponse,
  ReissueApiKeyResponse,
  RevokeResponse,
  RunDynamicQueryData,
  RunDynamicQueryResponse,
  SearchIdentityData,
  SearchIdentityResponse,
  SearchPositionsData,
  SearchPositionsResponse,
  UpdateClaimData,
  UpdateClaimResponse,
  UpdateIdentityData,
  UpdateIdentityResponse,
  UpdatePositionData,
  UpdatePositionResponse,
  UpdateUserData,
  UpdateUserResponse,
} from './types.gen'

export class AuthService {
  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Return JWT token using api key and did session
   * @throws ApiError
   */
  public static auth(data: AuthData): CancelablePromise<AuthResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/auth',
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }

  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Refresh JWT and refresh token
   * @throws ApiError
   */
  public static refresh(data: RefreshData): CancelablePromise<RefreshResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/refresh',
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }

  /**
   * @returns unknown Revoke JWT token
   * @throws ApiError
   */
  public static revoke(): CancelablePromise<RevokeResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/revoke',
    })
  }
}

export class ClaimPositionsService {
  /**
   * @returns unknown Get all claim positions
   * @throws ApiError
   */
  public static getClaimPositions(): CancelablePromise<GetClaimPositionsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/claim/:id/positions',
    })
  }
}

export class ClaimsService {
  /**
   * @returns unknown Get all claims in paginated list
   * @throws ApiError
   */
  public static getAll(): CancelablePromise<GetAllResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/claims',
    })
  }

  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Create a new claim
   * @throws ApiError
   */
  public static createClaim(
    data: CreateClaimData,
  ): CancelablePromise<CreateClaimResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/claims',
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }

  /**
   * @returns unknown Get single claim by id
   * @throws ApiError
   */
  public static getClaimById(): CancelablePromise<GetClaimByIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/claims/:id',
    })
  }

  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Update a claim
   * @throws ApiError
   */
  public static updateClaim(
    data: UpdateClaimData,
  ): CancelablePromise<UpdateClaimResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/claims/:id',
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }
}

export class IdentitiesService {
  /**
   * @param data The data for the request.
   * @param data.paging
   * @param data.sort
   * @param data.userWallet
   * @param data.timeframe
   * @returns unknown Get all identities in paginated list
   * @throws ApiError
   */
  public static getIdentities(
    data: GetIdentitiesData,
  ): CancelablePromise<GetIdentitiesResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/identities',
      query: {
        userWallet: data.userWallet,
        timeframe: data.timeframe,
        paging: data.paging,
        sort: data.sort,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.id sql id
   * @returns unknown Get single identity by id
   * @throws ApiError
   */
  public static getIdentityById(
    data: GetIdentityByIdData,
  ): CancelablePromise<GetIdentityByIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/identities/:id',
      path: {
        id: data.id,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Update an identity
   * @throws ApiError
   */
  public static updateIdentity(
    data: UpdateIdentityData,
  ): CancelablePromise<UpdateIdentityResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/identities/:id',
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }

  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Create a new identity
   * @throws ApiError
   */
  public static createIdentity(
    data: CreateIdentityData,
  ): CancelablePromise<CreateIdentityResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/identity',
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }

  /**
   * @param data The data for the request.
   * @param data.paging
   * @param data.sort
   * @param data.displayName
   * @param data.creator
   * @param data.userWallet
   * @param data.status
   * @param data.predicate
   * @param data.isUser
   * @param data.timeframe
   * @param data.identityId
   * @returns unknown Search identities in paginated list
   * @throws ApiError
   */
  public static searchIdentity(
    data: SearchIdentityData,
  ): CancelablePromise<SearchIdentityResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/identity/search',
      query: {
        displayName: data.displayName,
        creator: data.creator,
        userWallet: data.userWallet,
        status: data.status,
        predicate: data.predicate,
        isUser: data.isUser,
        timeframe: data.timeframe,
        identityId: data.identityId,
        paging: data.paging,
        sort: data.sort,
      },
    })
  }
}

export class IdentityPositionsService {
  /**
   * @returns unknown Get all identity positions
   * @throws ApiError
   */
  public static getIdentityPositions(): CancelablePromise<GetIdentityPositionsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/identity/:id/positions',
    })
  }
}

export class PositionsService {
  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Create a new position
   * @throws ApiError
   */
  public static createPosition(
    data: CreatePositionData,
  ): CancelablePromise<CreatePositionResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/positions',
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }

  /**
   * @returns unknown Get single position by id
   * @throws ApiError
   */
  public static getPositionById(): CancelablePromise<GetPositionByIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/positions/:id',
    })
  }

  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Update an position
   * @throws ApiError
   */
  public static updatePosition(
    data: UpdatePositionData,
  ): CancelablePromise<UpdatePositionResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/positions/:id',
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }

  /**
   * @param data The data for the request.
   * @param data.paging
   * @param data.sort
   * @param data.creator
   * @param data.vaultUuid
   * @param data.status
   * @param data.conviction
   * @returns unknown Search positions in paginated list
   * @throws ApiError
   */
  public static searchPositions(
    data: SearchPositionsData,
  ): CancelablePromise<SearchPositionsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/positions/search',
      query: {
        creator: data.creator,
        vault_uuid: data.vaultUuid,
        status: data.status,
        conviction: data.conviction,
        paging: data.paging,
        sort: data.sort,
      },
    })
  }
}

export class QueryBuilderService {
  /**
   * @returns unknown Return the query builder data structure for use with FE typeahead
   * @throws ApiError
   */
  public static getQueryStructure(): CancelablePromise<GetQueryStructureResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/query_builder',
    })
  }

  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Return query results if the query in body is valid
   * @throws ApiError
   */
  public static runDynamicQuery(
    data: RunDynamicQueryData,
  ): CancelablePromise<RunDynamicQueryResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/query_builder',
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }
}

export class UsersService {
  /**
   * @returns unknown Get all users in paginated list
   * @throws ApiError
   */
  public static getUsers(): CancelablePromise<GetUsersResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/users',
    })
  }

  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Create a new user
   * @throws ApiError
   */
  public static createUser(
    data: CreateUserData,
  ): CancelablePromise<CreateUserResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/users',
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }

  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Update a user
   * @throws ApiError
   */
  public static updateUser(
    data: UpdateUserData,
  ): CancelablePromise<UpdateUserResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/users/:id',
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }

  /**
   * @param data The data for the request.
   * @param data.id Id of user to delete
   * @returns unknown Delete a user by id
   * @throws ApiError
   */
  public static deleteUser(
    data: DeleteUserData,
  ): CancelablePromise<DeleteUserResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/users/:id',
      path: {
        id: data.id,
      },
    })
  }

  /**
   * @returns unknown Get single user by id
   * @throws ApiError
   */
  public static getUserById(): CancelablePromise<GetUserByIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/users/:id/private',
    })
  }

  /**
   * @returns unknown Get total position values for user
   * @throws ApiError
   */
  public static getUserTotals(): CancelablePromise<GetUserTotalsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/users/:id/totals',
    })
  }

  /**
   * @returns unknown Re-issue API key
   * @throws ApiError
   */
  public static reissueApiKey(): CancelablePromise<ReissueApiKeyResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/users/apikey',
    })
  }

  /**
   * @returns unknown Get identities user has position on
   * @throws ApiError
   */
  public static getUserIdentities(): CancelablePromise<GetUserIdentitiesResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/users/identities',
    })
  }

  /**
   * @returns unknown Get positions for user
   * @throws ApiError
   */
  public static getUsersPositions(): CancelablePromise<GetUsersPositionsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/users/positions',
    })
  }

  /**
   * @returns unknown Get total position values for paginated set of users
   * @throws ApiError
   */
  public static getAllUsersTotals(): CancelablePromise<GetAllUsersTotalsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/users/totals',
    })
  }

  /**
   * @returns unknown Get single user by id
   * @throws ApiError
   */
  public static getUserByWalletPublic(): CancelablePromise<GetUserByWalletPublicResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/users/wallet/:wallet',
    })
  }

  /**
   * @returns unknown Get single user by id
   * @throws ApiError
   */
  public static getUserByWallet(): CancelablePromise<GetUserByWalletResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/users/wallet/:wallet/private',
    })
  }
}
