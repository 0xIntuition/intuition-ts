// This file is auto-generated by @hey-api/openapi-ts

export type ActivityPaginatedResponse = {
  data: Array<ActivityPresenter>
  limit: number
  page: number
  total: number
}

export type ActivityPresenter = {
  admin?: string | null
  atom_cost: string
  atom_creation_fee: string
  block_hash: string
  block_height: string
  block_number: string
  contract: string
  created_at: string
  cumulative_gas_used: string
  effective_gas_price: string
  entry_fee: string
  event_type: Event
  excess_value: string
  exit_fee: string
  fee_denominator: string
  from_address: string
  gas: string
  gas_price: string
  gas_used: string
  id: string
  input_data?: InputData | null
  logs?: Array<LogType> | null
  max_fee_per_gas: string
  min_deposit: string
  min_share: string
  net_user_assets: string
  protocol_fee: string
  protocol_fee_paid: string
  protocol_vault?: string | null
  raw_input_data: string
  share_price: string
  shares_for_receiver: string
  timestamp: string
  total_asset_delta: string
  total_assets: string
  total_shares: string
  value: string
  vault_assets: string
  vault_balance: string
  vault_id: string
}

export type ActivityQuery = PaginatedRequest &
  IdentitySort & {
    blockHash?: string | null
    blockNumber: string
    contract?: string | null
    creator?: Identifier | null
    eventType?: Event | null
    fromAddress?: string | null
    vaultId: string
  }

export type AtomCreated = {
  atom_data: Blob | File
  vault_id: string
}

export type ClaimAttribute =
  | {
      vaultId: VaultIdQuery
    }
  | {
      counterVaultId: CounterVaultIdQuery
    }
  | {
      subjectVaultId: SubjectVaultIdQuery
    }
  | {
      objectVaultId: ObjectVaultIdQuery
    }
  | {
      predicateVaultId: PredicateVaultIdQuery
    }
  | {
      creator: CreatorQuery
    }
  | {
      status: StatusQuery
    }
  | {
      subjectDisplayName: SubjectNameQuery
    }
  | {
      objectDisplayName: ObjectNameQuery
    }
  | {
      predicateDisplayName: PredicateNameQuery
    }
  | 'noOp'

export type ClaimPaginatedResponse = {
  data: Array<ClaimPresenter>
  limit: number
  page: number
  total: number
}

export type ClaimPresenter = {
  against_assets_sum: string
  against_conviction_price: string
  against_conviction_sum: string
  against_num_positions: string
  assets_sum: string
  claim_id: string
  contract: string
  counter_vault_id?: string
  created_at: string
  creator?: UserPresenter | null
  for_assets_sum: string
  for_conviction_price: string
  for_conviction_sum: string
  for_num_positions: number
  num_positions: number
  object?: IdentityPresenter | null
  predicate?: IdentityPresenter | null
  status: Status
  subject?: IdentityPresenter | null
  updated_at: string
  user_conviction_against: string
  user_conviction_for: string
  vault_id?: string
}

export type ClaimSort = {
  direction?: SortDirection | null
  sortBy?: ClaimSortColumn | null
}

export type ClaimSortColumn =
  | 'VaultId'
  | 'CounterVaultId'
  | 'Creator'
  | 'SubjectVaultId'
  | 'ObjectVaultId'
  | 'PredicateVaultId'
  | 'CreatedAt'
  | 'UpdatedAt'
  | 'Status'
  | 'NumPositions'
  | 'ForNumPositions'
  | 'AgainstNumPositions'
  | 'ConvictionSum'
  | 'ForConvictionSum'
  | 'AgainstConvictionSum'
  | 'AssetsSum'
  | 'ForAssetsSum'
  | 'AgainstAssetsSum'

export const ClaimSortColumn = {
  VAULT_ID: 'VaultId',
  COUNTER_VAULT_ID: 'CounterVaultId',
  CREATOR: 'Creator',
  SUBJECT_VAULT_ID: 'SubjectVaultId',
  OBJECT_VAULT_ID: 'ObjectVaultId',
  PREDICATE_VAULT_ID: 'PredicateVaultId',
  CREATED_AT: 'CreatedAt',
  UPDATED_AT: 'UpdatedAt',
  STATUS: 'Status',
  NUM_POSITIONS: 'NumPositions',
  FOR_NUM_POSITIONS: 'ForNumPositions',
  AGAINST_NUM_POSITIONS: 'AgainstNumPositions',
  CONVICTION_SUM: 'ConvictionSum',
  FOR_CONVICTION_SUM: 'ForConvictionSum',
  AGAINST_CONVICTION_SUM: 'AgainstConvictionSum',
  ASSETS_SUM: 'AssetsSum',
  FOR_ASSETS_SUM: 'ForAssetsSum',
  AGAINST_ASSETS_SUM: 'AgainstAssetsSum',
} as const

export type Combinator = 'and' | 'or'

export const Combinator = {
  AND: 'and',
  OR: 'or',
} as const

export type CombinedSort =
  | IdentitySort
  | ClaimSort
  | PositionSort
  | UserTotalsSort

export type CounterVaultIdQuery = {
  combinator?: Combinator | null
  comparator?: NumericComparators | null
  options?: number | null
  userValue?: JsonNum | null
}

export type CreateAtom = {
  atom_data: Blob | File
}

export type CreateTriple = {
  object_id: string
  predicate_id: string
  subject_id: string
}

export type CreatorQuery = {
  combinator?: Combinator | null
  comparator?: StringComparators | null
  options?: string | null
  userValue?: string | null
}

export type DataSetQueries =
  | {
      identity: Array<IdentityAttribute>
    }
  | {
      claim: Array<ClaimAttribute>
    }

export type DataSetQuery = PaginatedRequest &
  DataSetQuerySort & {
    query: DataSetQueries
  }

export type DataSetQuerySort = {
  direction?: SortDirection | null
  sortBy?: CombinedSort | null
}

export type DepositAtom = {
  id: string
  receiver: string
}

export type DepositTriple = {
  id: string
  receiver: string
}

export type Deposited = {
  entry_fee: string
  id: string
  shares_for_receiver: string
  user_assets_after_total_fees: string
  vault_balance: string
}

export type DescriptionQuery = {
  combinator?: Combinator | null
  comparator?: StringComparators | null
  options?: string | null
  userValue?: string | null
}

export type DidQuery = {
  didSession: string
}

export type DisplayNameQuery = {
  combinator?: Combinator | null
  comparator?: StringComparators | null
  options?: string | null
  userValue?: string | null
}

export type EnumComparators = 'eq' | 'notEq'

export const EnumComparators = {
  EQ: 'eq',
  NOT_EQ: 'notEq',
} as const

export type Event =
  | 'createAtom'
  | 'createAtomCompressed'
  | 'createTriple'
  | 'currentSharePrice'
  | 'deployAtomWallet'
  | 'depositAtom'
  | 'depositTriple'
  | 'entryFeeAmount'
  | 'exitFeeAmount'
  | 'getVaultBalance'
  | 'getTripleAtoms'
  | 'getVaultStates'
  | 'maxRedeem'
  | 'redeemTriple'
  | 'redeemAtom'
  | 'setAdmin'
  | 'setAtomCost'
  | 'getVaultStateForUser'

export const Event = {
  CREATE_ATOM: 'createAtom',
  CREATE_ATOM_COMPRESSED: 'createAtomCompressed',
  CREATE_TRIPLE: 'createTriple',
  CURRENT_SHARE_PRICE: 'currentSharePrice',
  DEPLOY_ATOM_WALLET: 'deployAtomWallet',
  DEPOSIT_ATOM: 'depositAtom',
  DEPOSIT_TRIPLE: 'depositTriple',
  ENTRY_FEE_AMOUNT: 'entryFeeAmount',
  EXIT_FEE_AMOUNT: 'exitFeeAmount',
  GET_VAULT_BALANCE: 'getVaultBalance',
  GET_TRIPLE_ATOMS: 'getTripleAtoms',
  GET_VAULT_STATES: 'getVaultStates',
  MAX_REDEEM: 'maxRedeem',
  REDEEM_TRIPLE: 'redeemTriple',
  REDEEM_ATOM: 'redeemAtom',
  SET_ADMIN: 'setAdmin',
  SET_ATOM_COST: 'setAtomCost',
  GET_VAULT_STATE_FOR_USER: 'getVaultStateForUser',
} as const

export type ExternalReferenceQuery = {
  combinator?: Combinator | null
  comparator?: StringComparators | null
  options?: string | null
  userValue?: string | null
}

export type Identifier = number | string

export type IdentityAttribute =
  | {
      displayName: DisplayNameQuery
    }
  | {
      ids: IdsQuery
    }
  | {
      creator: CreatorQuery
    }
  | {
      description: DescriptionQuery
    }
  | {
      identityId: IdentityIdQuery
    }
  | {
      semantic: SemanticQuery
    }
  | {
      externalReference: ExternalReferenceQuery
    }
  | {
      vaultId: VaultIdQuery
    }
  | {
      status: StatusQuery
    }
  | 'noOp'

export type IdentityId =
  | {
      Did: string
    }
  | {
      Wallet: string
    }
  | {
      Other: string
    }

export type IdentityIdQuery = {
  combinator?: Combinator | null
  comparator?: StringComparators | null
  options?: string | null
  userValue?: string | null
}

export type IdentityPaginatedResponse = {
  data: Array<IdentityPresenter>
  limit: number
  page: number
  total: number
}

export type IdentityPresenter = {
  asset_delta: string
  assets_sum: string
  contract: string
  conviction_price: string
  conviction_price_delta: string
  conviction_sum: string
  corpora_id?: string | null
  created_at: string
  creator?: UserPresenter | null
  creator_address: string
  creator_id?: string | null
  description?: string | null
  display_name: string
  external_reference?: string | null
  id: string
  identity_hash: string
  identity_id: string
  image?: string | null
  is_user: boolean
  num_positions: number
  predicate: boolean
  semantic?: string | null
  status: Status
  updated_at: string
  user_asset_delta: string
  user_assets: string
  user_conviction: string
  vault_id: string
  vault_uuid?: string | null
}

export type IdentitySort = {
  direction?: SortDirection | null
  sortBy?: SortColumn | null
}

export type IdsQuery = {
  combinator?: Combinator | null
  comparator?: VecComparators | null
  options?: Array<string> | null
  userValue?: Array<string> | null
}

export type InputData =
  | {
      CreateAtom: CreateAtom
    }
  | {
      CreateTriple: CreateTriple
    }
  | {
      DepositAtom: DepositAtom
    }
  | {
      DepositTriple: DepositTriple
    }
  | {
      RedeemAtom: RedeemAtom
    }
  | {
      RedeemTriple: RedeemTriple
    }
  | 'NoOp'

export type InputFile = string

export type IsCompleteQuery = {
  combinator?: Combinator | null
  comparator?: EnumComparators | null
  options?: boolean | null
  userValue?: boolean | null
}

export type JsonNum = string | number

export type LinkedAccountPresenter = {
  account_type?: string | null
  active?: boolean
  address?: string | null
  chain_type?: string | null
  connector_type?: string | null
  created_at: string
  id: string
  link_id: string
  privy_id?: string | null
  total?: number | null
  updated_at: string
  user_id: string
  verified_at?: number | null
  wallet_client?: string | null
  wallet_client_type?: string | null
}

export type LinkedAccountQuery = PaginatedRequest &
  LinkedAccountSort & {
    account_type?: string | null
    active?: boolean
    address?: string | null
    chain_type?: string | null
    connector_type?: string | null
    privy_id?: string | null
    user_id?: string | null
    wallet_client?: string | null
    wallet_client_type?: string | null
  }

export type LinkedAccountSort = {
  direction?: SortDirection | null
  sortBy?: SortColumn | null
}

export type LogType =
  | {
      AtomCreated: AtomCreated
    }
  | {
      Deposited: Deposited
    }
  | {
      TripleCreated: TripleCreated
    }
  | {
      Redeemed: Redeemed
    }
  | 'NoOp'

export type NewClaim = {
  contract: string
  counter_vault_id?: Identifier | null
  counter_vault_uuid?: string | null
  creator: string
  creator_id?: string | null
  object: Identifier
  object_id?: string | null
  predicate: Identifier
  predicate_id?: string | null
  subject: Identifier
  subject_id?: string | null
  vault_id?: Identifier | null
  vault_uuid?: string | null
}

export type NewLinkedAccount = {
  account_type?: string | null
  active?: boolean
  add_points?: boolean
  address?: string | null
  chain_type?: string | null
  connector_type?: string | null
  link_id: string
  privy_id?: string | null
  user_id: string
  verified_at?: number | null
  wallet_client?: string | null
  wallet_client_type?: string | null
}

export type NewPosition = {
  assets: string
  contract: string
  creator: string
  creator_id?: string | null
  fee: string
  share_price: string
  shares: string
  value: string
  vault_id: Identifier
  vault_type?: VaultType | null
  vault_uuid?: string | null
}

export type NumericComparators = 'eq' | 'lte' | 'lt' | 'gt' | 'gte' | 'notEq'

export const NumericComparators = {
  EQ: 'eq',
  LTE: 'lte',
  LT: 'lt',
  GT: 'gt',
  GTE: 'gte',
  NOT_EQ: 'notEq',
} as const

export type ObjectNameQuery = {
  combinator?: Combinator | null
  comparator?: StringComparators | null
  options?: string | null
  userValue?: string | null
}

export type ObjectVaultIdQuery = {
  combinator?: Combinator | null
  comparator?: NumericComparators | null
  options?: number | null
  userValue?: JsonNum | null
}

export type PaginatedRequest = {
  limit: number
  offset: number
  page: number
}

export type PointsRequest = {
  points: number
}

export type PositionPaginatedResponse = {
  data: Array<PositionPresenter>
  limit: number
  page: number
  total: number
}

export type PositionPresenter = {
  assets: string
  contract: string
  conviction: string
  created_at: string
  creator_id?: string | null
  direction: VaultType
  fee: string
  id: string
  share_price: string
  total?: number | null
  updated_at: string
  user?: UserPresenter | null
  user_asset_delta: string
  value: string
  vault_id: string
}

export type PositionSort = {
  direction?: SortDirection | null
  sortBy?: PositionSortColumn | null
}

export type PositionSortColumn =
  | 'CreatedAt'
  | 'UpdatedAt'
  | 'Conviction'
  | 'Assets'

export const PositionSortColumn = {
  CREATED_AT: 'CreatedAt',
  UPDATED_AT: 'UpdatedAt',
  CONVICTION: 'Conviction',
  ASSETS: 'Assets',
} as const

export type PredicateNameQuery = {
  combinator?: Combinator | null
  comparator?: StringComparators | null
  options?: string | null
  userValue?: string | null
}

export type PredicateVaultIdQuery = {
  combinator?: Combinator | null
  comparator?: NumericComparators | null
  options?: number | null
  userValue?: JsonNum | null
}

export type RedeemAtom = {
  id: string
  receiver: string
  shares: string
}

export type RedeemTriple = {
  id: string
  receiver: string
  shares: string
}

export type Redeemed = {
  assets_for_receiver: string
  exit_fee: string
  id: string
  shares: string
  vault_balance: string
}

export type RefreshRequest = {
  refreshToken: string
}

export type Role = 'User' | 'Admin' | 'Atom'

export const Role = {
  USER: 'User',
  ADMIN: 'Admin',
  ATOM: 'Atom',
} as const

export type SemanticQuery = {
  combinator?: Combinator | null
  comparator?: StringComparators | null
  options?: string | null
  userValue?: string | null
}

export type SortColumn =
  | 'IdentityId'
  | 'DisplayName'
  | 'Creator'
  | 'NumPositions'
  | 'AssetsSum'
  | 'AssetsPrice'
  | 'Description'
  | 'CreatedAt'
  | 'UpdatedAt'
  | 'Status'
  | 'SharesSum'
  | 'ConvictionSum'
  | 'ConvictionPrice'
  | 'AssetDelta'
  | 'ConvictionPriceDelta'
  | 'UserConviction'
  | 'UserAssets'
  | 'UserAssetDelta'

export const SortColumn = {
  IDENTITY_ID: 'IdentityId',
  DISPLAY_NAME: 'DisplayName',
  CREATOR: 'Creator',
  NUM_POSITIONS: 'NumPositions',
  ASSETS_SUM: 'AssetsSum',
  ASSETS_PRICE: 'AssetsPrice',
  DESCRIPTION: 'Description',
  CREATED_AT: 'CreatedAt',
  UPDATED_AT: 'UpdatedAt',
  STATUS: 'Status',
  SHARES_SUM: 'SharesSum',
  CONVICTION_SUM: 'ConvictionSum',
  CONVICTION_PRICE: 'ConvictionPrice',
  ASSET_DELTA: 'AssetDelta',
  CONVICTION_PRICE_DELTA: 'ConvictionPriceDelta',
  USER_CONVICTION: 'UserConviction',
  USER_ASSETS: 'UserAssets',
  USER_ASSET_DELTA: 'UserAssetDelta',
} as const

export type SortDirection = 'asc' | 'desc'

export const SortDirection = {
  ASC: 'asc',
  DESC: 'desc',
} as const

export type Status = 'pending' | 'complete' | 'removed' | 'error'

export const Status = {
  PENDING: 'pending',
  COMPLETE: 'complete',
  REMOVED: 'removed',
  ERROR: 'error',
} as const

export type StatusExplainer = 'Pending' | 'Complete' | 'Removed'

export const StatusExplainer = {
  PENDING: 'Pending',
  COMPLETE: 'Complete',
  REMOVED: 'Removed',
} as const

export type StatusQuery = {
  combinator?: Combinator | null
  comparator?: EnumComparators | null
  options?: StatusExplainer | null
  userValue?: Status | null
}

export type StringComparators = 'eq' | 'contains' | 'notEq'

export const StringComparators = {
  EQ: 'eq',
  CONTAINS: 'contains',
  NOT_EQ: 'notEq',
} as const

export type SubjectNameQuery = {
  combinator?: Combinator | null
  comparator?: StringComparators | null
  options?: string | null
  userValue?: string | null
}

export type SubjectVaultIdQuery = {
  combinator?: Combinator | null
  comparator?: NumericComparators | null
  options?: number | null
  userValue?: JsonNum | null
}

export type TimeFrame =
  | 'lastMinute'
  | 'last5Minutes'
  | 'last10Minutes'
  | 'lastHour'
  | 'last4Hours'
  | 'lastDay'
  | 'lastWeek'
  | 'lastMonth'
  | 'any'

export const TimeFrame = {
  LAST_MINUTE: 'lastMinute',
  LAST5MINUTES: 'last5Minutes',
  LAST10MINUTES: 'last10Minutes',
  LAST_HOUR: 'lastHour',
  LAST4HOURS: 'last4Hours',
  LAST_DAY: 'lastDay',
  LAST_WEEK: 'lastWeek',
  LAST_MONTH: 'lastMonth',
  ANY: 'any',
} as const

export type TripleCreated = {
  object_id: string
  predicate_id: string
  subject_id: string
  vault_id: string
}

export type UpdateClaim = {
  counter_vault_id?: Identifier | null
  counter_vault_uuid?: string | null
  creator: string
  creator_id?: string | null
  object?: Identifier | null
  object_id?: string | null
  predicate?: Identifier | null
  predicate_id?: string | null
  status?: Status | null
  subject?: Identifier | null
  subject_id?: string | null
  vault_id?: Identifier | null
  vault_uuid?: string | null
}

export type UpdatePosition = {
  assets: string
  creator?: string | null
  creator_id?: string | null
  fee: string
  share_price: string
  shares: string
  status?: Status | null
  value: string
  vault_id?: Identifier | null
  vault_type?: VaultType | null
  vault_uuid?: string | null
}

export type UpsertUser = {
  api_key?: string | null
  did?: string | null
  display_name?: string | null
  ens_name?: string | null
  image?: string | null
  privy_id: string
  role?: Role | null
  wallet?: string | null
}

export type User = {
  api_key?: string | null
  created_at: string
  did?: string | null
  display_name?: string | null
  ens_name?: string | null
  id: string
  image?: string | null
  last_login?: string | null
  privy_id?: string | null
  role: Role
  updated_at: string
  wallet: string
}

export type UserPoints = {
  created_at: string
  id: string
  points: number
  updated_at: string
  user_id?: string | null
  wallet: string
}

export type UserPresenter = {
  display_name?: string | null
  ens_name?: string | null
  id?: string | null
  image?: string | null
  privy_id?: string | null
  total?: number | null
  wallet: string
}

export type UserTotalPaginatedResponse = {
  data: Array<UserTotalsPresenter>
  limit: number
  page: number
  total: number
}

export type UserTotalsPresenter = {
  created_at?: string | null
  display_name?: string | null
  ens_name?: string | null
  id?: string | null
  image?: string | null
  privy_id?: string | null
  total_claims: number
  total_delta: string
  total_entry_fees: string
  total_exit_fees: string
  total_identities: number
  total_position_value: string
  total_positions: number
  total_protocol_fee_paid: string
  updated_at?: string | null
  user_points: number
  wallet: string
}

export type UserTotalsQuery = PaginatedRequest &
  UserTotalsSort & {
    timeframe?: TimeFrame | null
  }

export type UserTotalsSort = {
  direction?: SortDirection | null
  sortBy?: SortColumn | null
}

export type VaultIdQuery = {
  combinator?: Combinator | null
  comparator?: NumericComparators | null
  options?: number | null
  userValue?: JsonNum | null
}

export type VaultType = 'for' | 'against'

export const VaultType = {
  FOR: 'for',
  AGAINST: 'against',
} as const

export type VecComparators = 'in' | 'notIn'

export const VecComparators = {
  IN: 'in',
  NOT_IN: 'notIn',
} as const

export type AuthData = {
  requestBody: DidQuery
}

export type AuthResponse = {
  newUser: boolean
  refreshToken: string
  token: string
  userId: string
}

export type RefreshData = {
  requestBody: RefreshRequest
}

export type RefreshResponse = {
  refreshToken: string
}

export type RevokeResponse = unknown

export type GetClaimPositionsResponse = {
  data: Array<PositionPresenter>
  limit: number
  page: number
  total: number
}

export type GetAllResponse = {
  data: Array<ClaimPresenter>
  limit: number
  page: number
  total: number
}

export type CreateClaimData = {
  requestBody: NewClaim
}

export type CreateClaimResponse = {
  against_assets_sum: string
  against_conviction_price: string
  against_conviction_sum: string
  against_num_positions: string
  assets_sum: string
  claim_id: string
  contract: string
  counter_vault_id?: string
  created_at: string
  creator?: UserPresenter | null
  for_assets_sum: string
  for_conviction_price: string
  for_conviction_sum: string
  for_num_positions: number
  num_positions: number
  object?: IdentityPresenter | null
  predicate?: IdentityPresenter | null
  status: Status
  subject?: IdentityPresenter | null
  updated_at: string
  user_conviction_against: string
  user_conviction_for: string
  vault_id?: string
}

export type GetClaimByIdResponse = {
  against_assets_sum: string
  against_conviction_price: string
  against_conviction_sum: string
  against_num_positions: string
  assets_sum: string
  claim_id: string
  contract: string
  counter_vault_id?: string
  created_at: string
  creator?: UserPresenter | null
  for_assets_sum: string
  for_conviction_price: string
  for_conviction_sum: string
  for_num_positions: number
  num_positions: number
  object?: IdentityPresenter | null
  predicate?: IdentityPresenter | null
  status: Status
  subject?: IdentityPresenter | null
  updated_at: string
  user_conviction_against: string
  user_conviction_for: string
  vault_id?: string
}

export type UpdateClaimData = {
  requestBody: UpdateClaim
}

export type UpdateClaimResponse = {
  against_assets_sum: string
  against_conviction_price: string
  against_conviction_sum: string
  against_num_positions: string
  assets_sum: string
  claim_id: string
  contract: string
  counter_vault_id?: string
  created_at: string
  creator?: UserPresenter | null
  for_assets_sum: string
  for_conviction_price: string
  for_conviction_sum: string
  for_num_positions: number
  num_positions: number
  object?: IdentityPresenter | null
  predicate?: IdentityPresenter | null
  status: Status
  subject?: IdentityPresenter | null
  updated_at: string
  user_conviction_against: string
  user_conviction_for: string
  vault_id?: string
}

export type GetIdentitiesData = {
  paging: PaginatedRequest
  sort: IdentitySort
  timeframe?: TimeFrame | null
  userWallet?: string | null
}

export type GetIdentitiesResponse = {
  data: Array<IdentityPresenter>
  limit: number
  page: number
  total: number
}

export type GetIdentityByIdData = {
  /**
   * sql id
   */
  id: Identifier
}

export type GetIdentityByIdResponse = {
  asset_delta: string
  assets_sum: string
  contract: string
  conviction_price: string
  conviction_price_delta: string
  conviction_sum: string
  corpora_id?: string | null
  created_at: string
  creator?: UserPresenter | null
  creator_address: string
  creator_id?: string | null
  description?: string | null
  display_name: string
  external_reference?: string | null
  id: string
  identity_hash: string
  identity_id: string
  image?: string | null
  is_user: boolean
  num_positions: number
  predicate: boolean
  semantic?: string | null
  status: Status
  updated_at: string
  user_asset_delta: string
  user_assets: string
  user_conviction: string
  vault_id: string
  vault_uuid?: string | null
}

export type UpdateIdentityData = {
  requestBody: {
    creator?: string | null
    creator_uuid?: string | null
    description?: string | null
    display_name?: string | null
    external_reference?: string | null
    identity_id?: Identifier | null
    image?: string | null
    status?: Status | null
    vault_id?: Identifier | null
    vault_uuid?: string | null
  }
}

export type UpdateIdentityResponse = {
  contract: string
  corpora_id?: string | null
  created_at: string
  creator: string
  creator_id?: string | null
  description?: string | null
  display_name: string
  external_reference?: string | null
  id: string
  identity_hash: string
  identity_id: string
  image?: string | null
  is_user: boolean
  predicate: boolean
  semantic?: string | null
  status: Status
  updated_at: string
  vault_id: string
  vault_uuid?: string | null
}

export type CreateIdentityData = {
  requestBody: {
    contract: string
    creator: string
    creator_uuid?: string | null
    description?: string | null
    display_name: string
    external_reference?: string | null
    identity_hash?: string | null
    identity_id?: IdentityId | null
    image?: InputFile | null
    is_user?: boolean
    predicate?: boolean
    vault_id?: Identifier | null
    vault_uuid?: string | null
  }
}

export type CreateIdentityResponse = {
  asset_delta: string
  assets_sum: string
  contract: string
  conviction_price: string
  conviction_price_delta: string
  conviction_sum: string
  corpora_id?: string | null
  created_at: string
  creator?: UserPresenter | null
  creator_address: string
  creator_id?: string | null
  description?: string | null
  display_name: string
  external_reference?: string | null
  id: string
  identity_hash: string
  identity_id: string
  image?: string | null
  is_user: boolean
  num_positions: number
  predicate: boolean
  semantic?: string | null
  status: Status
  updated_at: string
  user_asset_delta: string
  user_assets: string
  user_conviction: string
  vault_id: string
  vault_uuid?: string | null
}

export type SearchIdentityData = {
  creator?: Identifier | null
  displayName?: string | null
  isUser?: boolean | null
  paging: PaginatedRequest
  predicate?: boolean | null
  sort: IdentitySort
  status?: Status | null
  timeframe?: TimeFrame | null
  userWallet?: string | null
}

export type SearchIdentityResponse = {
  data: Array<IdentityPresenter>
  limit: number
  page: number
  total: number
}

export type GetIdentityPositionsResponse = {
  data: Array<PositionPresenter>
  limit: number
  page: number
  total: number
}

export type CreatePositionData = {
  requestBody: NewPosition
}

export type CreatePositionResponse = {
  assets: string
  contract: string
  conviction: string
  created_at: string
  creator: string
  creator_id?: string | null
  fee: string
  id: string
  share_price: string
  status: Status
  updated_at: string
  value: string
  vault_id: string
  vault_type: VaultType
  vault_uuid?: string | null
}

export type GetPositionByIdResponse = {
  assets: string
  contract: string
  conviction: string
  created_at: string
  creator: string
  creator_id?: string | null
  fee: string
  id: string
  share_price: string
  status: Status
  updated_at: string
  value: string
  vault_id: string
  vault_type: VaultType
  vault_uuid?: string | null
}

export type UpdatePositionData = {
  requestBody: UpdatePosition
}

export type UpdatePositionResponse = {
  assets: string
  contract: string
  conviction: string
  created_at: string
  creator: string
  creator_id?: string | null
  fee: string
  id: string
  share_price: string
  status: Status
  updated_at: string
  value: string
  vault_id: string
  vault_type: VaultType
  vault_uuid?: string | null
}

export type SearchPositionsData = {
  conviction?: number | null
  creator?: Identifier | null
  paging: PaginatedRequest
  sort: PositionSort
  status?: Status | null
  vaultUuid?: string | null
}

export type SearchPositionsResponse = {
  data: Array<PositionPresenter>
  limit: number
  page: number
  total: number
}

export type GetQueryStructureResponse = unknown

export type RunDynamicQueryData = {
  requestBody: DataSetQuery
}

export type RunDynamicQueryResponse =
  | IdentityPaginatedResponse
  | ClaimPaginatedResponse
  | PositionPaginatedResponse

export type GetUsersResponse = {
  data: Array<UserPresenter>
  limit: number
  page: number
  total: number
}

export type CreateUserData = {
  requestBody: UpsertUser
}

export type CreateUserResponse = {
  api_key?: string | null
  created_at: string
  did?: string | null
  display_name?: string | null
  ens_name?: string | null
  id: string
  image?: string | null
  last_login?: string | null
  privy_id?: string | null
  role: Role
  updated_at: string
  wallet: string
}

export type UpdateUserData = {
  requestBody: UpsertUser
}

export type UpdateUserResponse = {
  api_key?: string | null
  created_at: string
  did?: string | null
  display_name?: string | null
  ens_name?: string | null
  id: string
  image?: string | null
  last_login?: string | null
  privy_id?: string | null
  role: Role
  updated_at: string
  wallet: string
}

export type DeleteUserData = {
  /**
   * Id of user to delete
   */
  id: string
}

export type DeleteUserResponse = {
  api_key?: string | null
  created_at: string
  did?: string | null
  display_name?: string | null
  ens_name?: string | null
  id: string
  image?: string | null
  last_login?: string | null
  privy_id?: string | null
  role: Role
  updated_at: string
  wallet: string
}

export type UpdateUserPointsData = {
  requestBody: UpsertUser
}

export type UpdateUserPointsResponse = {
  api_key?: string | null
  created_at: string
  did?: string | null
  display_name?: string | null
  ens_name?: string | null
  id: string
  image?: string | null
  last_login?: string | null
  privy_id?: string | null
  role: Role
  updated_at: string
  wallet: string
}

export type GetUserByIdResponse = {
  api_key?: string | null
  created_at: string
  did?: string | null
  display_name?: string | null
  ens_name?: string | null
  id: string
  image?: string | null
  last_login?: string | null
  privy_id?: string | null
  role: Role
  updated_at: string
  wallet: string
}

export type GetUserTotalsResponse = {
  created_at?: string | null
  display_name?: string | null
  ens_name?: string | null
  id?: string | null
  image?: string | null
  privy_id?: string | null
  total_claims: number
  total_delta: string
  total_entry_fees: string
  total_exit_fees: string
  total_identities: number
  total_position_value: string
  total_positions: number
  total_protocol_fee_paid: string
  updated_at?: string | null
  user_points: number
  wallet: string
}

export type ReissueApiKeyResponse = {
  api_key?: string | null
  created_at: string
  did?: string | null
  display_name?: string | null
  ens_name?: string | null
  id: string
  image?: string | null
  last_login?: string | null
  privy_id?: string | null
  role: Role
  updated_at: string
  wallet: string
}

export type GetUserIdentitiesResponse = {
  data: Array<IdentityPresenter>
  limit: number
  page: number
  total: number
}

export type GetUsersPositionsResponse = {
  data: Array<PositionPresenter>
  limit: number
  page: number
  total: number
}

export type GetAllUsersTotalsResponse = {
  data: Array<UserTotalsPresenter>
  limit: number
  page: number
  total: number
}

export type GetUserByWalletPublicResponse = {
  api_key?: string | null
  created_at: string
  did?: string | null
  display_name?: string | null
  ens_name?: string | null
  id: string
  image?: string | null
  last_login?: string | null
  privy_id?: string | null
  role: Role
  updated_at: string
  wallet: string
}

export type GetUserByWalletResponse = {
  api_key?: string | null
  created_at: string
  did?: string | null
  display_name?: string | null
  ens_name?: string | null
  id: string
  image?: string | null
  last_login?: string | null
  privy_id?: string | null
  role: Role
  updated_at: string
  wallet: string
}

export type $OpenApiTs = {
  '/auth': {
    post: {
      req: {
        requestBody: DidQuery
      }
      res: {
        /**
         * Return JWT token using api key and did session
         */
        200: {
          newUser: boolean
          refreshToken: string
          token: string
          userId: string
        }
      }
    }
  }
  '/refresh': {
    post: {
      req: {
        requestBody: RefreshRequest
      }
      res: {
        /**
         * Refresh JWT and refresh token
         */
        200: {
          refreshToken: string
        }
      }
    }
  }
  '/revoke': {
    post: {
      res: {
        /**
         * Revoke JWT token
         */
        200: unknown
      }
    }
  }
  '/claim/:id/positions': {
    get: {
      res: {
        /**
         * Get all claim positions
         */
        200: {
          data: Array<PositionPresenter>
          limit: number
          page: number
          total: number
        }
      }
    }
  }
  '/claims': {
    get: {
      res: {
        /**
         * Get all claims in paginated list
         */
        200: {
          data: Array<ClaimPresenter>
          limit: number
          page: number
          total: number
        }
      }
    }
    post: {
      req: {
        requestBody: NewClaim
      }
      res: {
        /**
         * Create a new claim
         */
        200: {
          against_assets_sum: string
          against_conviction_price: string
          against_conviction_sum: string
          against_num_positions: string
          assets_sum: string
          claim_id: string
          contract: string
          counter_vault_id?: string
          created_at: string
          creator?: UserPresenter | null
          for_assets_sum: string
          for_conviction_price: string
          for_conviction_sum: string
          for_num_positions: number
          num_positions: number
          object?: IdentityPresenter | null
          predicate?: IdentityPresenter | null
          status: Status
          subject?: IdentityPresenter | null
          updated_at: string
          user_conviction_against: string
          user_conviction_for: string
          vault_id?: string
        }
      }
    }
  }
  '/claims/:id': {
    get: {
      res: {
        /**
         * Get single claim by id
         */
        200: {
          against_assets_sum: string
          against_conviction_price: string
          against_conviction_sum: string
          against_num_positions: string
          assets_sum: string
          claim_id: string
          contract: string
          counter_vault_id?: string
          created_at: string
          creator?: UserPresenter | null
          for_assets_sum: string
          for_conviction_price: string
          for_conviction_sum: string
          for_num_positions: number
          num_positions: number
          object?: IdentityPresenter | null
          predicate?: IdentityPresenter | null
          status: Status
          subject?: IdentityPresenter | null
          updated_at: string
          user_conviction_against: string
          user_conviction_for: string
          vault_id?: string
        }
      }
    }
    put: {
      req: {
        requestBody: UpdateClaim
      }
      res: {
        /**
         * Update a claim
         */
        200: {
          against_assets_sum: string
          against_conviction_price: string
          against_conviction_sum: string
          against_num_positions: string
          assets_sum: string
          claim_id: string
          contract: string
          counter_vault_id?: string
          created_at: string
          creator?: UserPresenter | null
          for_assets_sum: string
          for_conviction_price: string
          for_conviction_sum: string
          for_num_positions: number
          num_positions: number
          object?: IdentityPresenter | null
          predicate?: IdentityPresenter | null
          status: Status
          subject?: IdentityPresenter | null
          updated_at: string
          user_conviction_against: string
          user_conviction_for: string
          vault_id?: string
        }
      }
    }
  }
  '/identities': {
    get: {
      req: {
        paging: PaginatedRequest
        sort: IdentitySort
        timeframe?: TimeFrame | null
        userWallet?: string | null
      }
      res: {
        /**
         * Get all identities in paginated list
         */
        200: {
          data: Array<IdentityPresenter>
          limit: number
          page: number
          total: number
        }
      }
    }
  }
  '/identities/:id': {
    get: {
      req: {
        /**
         * sql id
         */
        id: Identifier
      }
      res: {
        /**
         * Get single identity by id
         */
        200: {
          asset_delta: string
          assets_sum: string
          contract: string
          conviction_price: string
          conviction_price_delta: string
          conviction_sum: string
          corpora_id?: string | null
          created_at: string
          creator?: UserPresenter | null
          creator_address: string
          creator_id?: string | null
          description?: string | null
          display_name: string
          external_reference?: string | null
          id: string
          identity_hash: string
          identity_id: string
          image?: string | null
          is_user: boolean
          num_positions: number
          predicate: boolean
          semantic?: string | null
          status: Status
          updated_at: string
          user_asset_delta: string
          user_assets: string
          user_conviction: string
          vault_id: string
          vault_uuid?: string | null
        }
      }
    }
    put: {
      req: {
        requestBody: {
          creator?: string | null
          creator_uuid?: string | null
          description?: string | null
          display_name?: string | null
          external_reference?: string | null
          identity_id?: Identifier | null
          image?: string | null
          status?: Status | null
          vault_id?: Identifier | null
          vault_uuid?: string | null
        }
      }
      res: {
        /**
         * Update an identity
         */
        200: {
          contract: string
          corpora_id?: string | null
          created_at: string
          creator: string
          creator_id?: string | null
          description?: string | null
          display_name: string
          external_reference?: string | null
          id: string
          identity_hash: string
          identity_id: string
          image?: string | null
          is_user: boolean
          predicate: boolean
          semantic?: string | null
          status: Status
          updated_at: string
          vault_id: string
          vault_uuid?: string | null
        }
      }
    }
  }
  '/identity': {
    post: {
      req: {
        requestBody: {
          contract: string
          creator: string
          creator_uuid?: string | null
          description?: string | null
          display_name: string
          external_reference?: string | null
          identity_hash?: string | null
          identity_id?: IdentityId | null
          image?: InputFile | null
          is_user?: boolean
          predicate?: boolean
          vault_id?: Identifier | null
          vault_uuid?: string | null
        }
      }
      res: {
        /**
         * Create a new identity
         */
        200: {
          asset_delta: string
          assets_sum: string
          contract: string
          conviction_price: string
          conviction_price_delta: string
          conviction_sum: string
          corpora_id?: string | null
          created_at: string
          creator?: UserPresenter | null
          creator_address: string
          creator_id?: string | null
          description?: string | null
          display_name: string
          external_reference?: string | null
          id: string
          identity_hash: string
          identity_id: string
          image?: string | null
          is_user: boolean
          num_positions: number
          predicate: boolean
          semantic?: string | null
          status: Status
          updated_at: string
          user_asset_delta: string
          user_assets: string
          user_conviction: string
          vault_id: string
          vault_uuid?: string | null
        }
      }
    }
  }
  '/identity/search': {
    get: {
      req: {
        creator?: Identifier | null
        displayName?: string | null
        isUser?: boolean | null
        paging: PaginatedRequest
        predicate?: boolean | null
        sort: IdentitySort
        status?: Status | null
        timeframe?: TimeFrame | null
        userWallet?: string | null
      }
      res: {
        /**
         * Search identities in paginated list
         */
        200: {
          data: Array<IdentityPresenter>
          limit: number
          page: number
          total: number
        }
      }
    }
  }
  '/identity/:id/positions': {
    get: {
      res: {
        /**
         * Get all identity positions
         */
        200: {
          data: Array<PositionPresenter>
          limit: number
          page: number
          total: number
        }
      }
    }
  }
  '/positions': {
    post: {
      req: {
        requestBody: NewPosition
      }
      res: {
        /**
         * Create a new position
         */
        200: {
          assets: string
          contract: string
          conviction: string
          created_at: string
          creator: string
          creator_id?: string | null
          fee: string
          id: string
          share_price: string
          status: Status
          updated_at: string
          value: string
          vault_id: string
          vault_type: VaultType
          vault_uuid?: string | null
        }
      }
    }
  }
  '/positions/:id': {
    get: {
      res: {
        /**
         * Get single position by id
         */
        200: {
          assets: string
          contract: string
          conviction: string
          created_at: string
          creator: string
          creator_id?: string | null
          fee: string
          id: string
          share_price: string
          status: Status
          updated_at: string
          value: string
          vault_id: string
          vault_type: VaultType
          vault_uuid?: string | null
        }
      }
    }
    post: {
      req: {
        requestBody: UpdatePosition
      }
      res: {
        /**
         * Update an position
         */
        200: {
          assets: string
          contract: string
          conviction: string
          created_at: string
          creator: string
          creator_id?: string | null
          fee: string
          id: string
          share_price: string
          status: Status
          updated_at: string
          value: string
          vault_id: string
          vault_type: VaultType
          vault_uuid?: string | null
        }
      }
    }
  }
  '/positions/search': {
    get: {
      req: {
        conviction?: number | null
        creator?: Identifier | null
        paging: PaginatedRequest
        sort: PositionSort
        status?: Status | null
        vaultUuid?: string | null
      }
      res: {
        /**
         * Search positions in paginated list
         */
        200: {
          data: Array<PositionPresenter>
          limit: number
          page: number
          total: number
        }
      }
    }
  }
  '/query_builder': {
    get: {
      res: {
        /**
         * Return the query builder data structure for use with FE typeahead
         */
        200: unknown
      }
    }
    post: {
      req: {
        requestBody: DataSetQuery
      }
      res: {
        /**
         * Return query results if the query in body is valid
         */
        200:
          | IdentityPaginatedResponse
          | ClaimPaginatedResponse
          | PositionPaginatedResponse
      }
    }
  }
  '/users': {
    get: {
      res: {
        /**
         * Get all users in paginated list
         */
        200: {
          data: Array<UserPresenter>
          limit: number
          page: number
          total: number
        }
      }
    }
    post: {
      req: {
        requestBody: UpsertUser
      }
      res: {
        /**
         * Create a new user
         */
        200: {
          api_key?: string | null
          created_at: string
          did?: string | null
          display_name?: string | null
          ens_name?: string | null
          id: string
          image?: string | null
          last_login?: string | null
          privy_id?: string | null
          role: Role
          updated_at: string
          wallet: string
        }
      }
    }
  }
  '/users/:id': {
    put: {
      req: {
        requestBody: UpsertUser
      }
      res: {
        /**
         * Update a user
         */
        200: {
          api_key?: string | null
          created_at: string
          did?: string | null
          display_name?: string | null
          ens_name?: string | null
          id: string
          image?: string | null
          last_login?: string | null
          privy_id?: string | null
          role: Role
          updated_at: string
          wallet: string
        }
      }
    }
    delete: {
      req: {
        /**
         * Id of user to delete
         */
        id: string
      }
      res: {
        /**
         * Delete a user by id
         */
        200: {
          api_key?: string | null
          created_at: string
          did?: string | null
          display_name?: string | null
          ens_name?: string | null
          id: string
          image?: string | null
          last_login?: string | null
          privy_id?: string | null
          role: Role
          updated_at: string
          wallet: string
        }
      }
    }
  }
  '/users/:id/points': {
    put: {
      req: {
        requestBody: UpsertUser
      }
      res: {
        /**
         * Add points for user
         */
        200: {
          api_key?: string | null
          created_at: string
          did?: string | null
          display_name?: string | null
          ens_name?: string | null
          id: string
          image?: string | null
          last_login?: string | null
          privy_id?: string | null
          role: Role
          updated_at: string
          wallet: string
        }
      }
    }
  }
  '/users/:id/private': {
    get: {
      res: {
        /**
         * Get single user by id
         */
        200: {
          api_key?: string | null
          created_at: string
          did?: string | null
          display_name?: string | null
          ens_name?: string | null
          id: string
          image?: string | null
          last_login?: string | null
          privy_id?: string | null
          role: Role
          updated_at: string
          wallet: string
        }
      }
    }
  }
  '/users/:id/totals': {
    get: {
      res: {
        /**
         * Get total position values for user
         */
        200: {
          created_at?: string | null
          display_name?: string | null
          ens_name?: string | null
          id?: string | null
          image?: string | null
          privy_id?: string | null
          total_claims: number
          total_delta: string
          total_entry_fees: string
          total_exit_fees: string
          total_identities: number
          total_position_value: string
          total_positions: number
          total_protocol_fee_paid: string
          updated_at?: string | null
          user_points: number
          wallet: string
        }
      }
    }
  }
  '/users/apikey': {
    post: {
      res: {
        /**
         * Re-issue API key
         */
        200: {
          api_key?: string | null
          created_at: string
          did?: string | null
          display_name?: string | null
          ens_name?: string | null
          id: string
          image?: string | null
          last_login?: string | null
          privy_id?: string | null
          role: Role
          updated_at: string
          wallet: string
        }
      }
    }
  }
  '/users/identities': {
    get: {
      res: {
        /**
         * Get identities user has position on
         */
        200: {
          data: Array<IdentityPresenter>
          limit: number
          page: number
          total: number
        }
      }
    }
  }
  '/users/positions': {
    get: {
      res: {
        /**
         * Get positions for user
         */
        200: {
          data: Array<PositionPresenter>
          limit: number
          page: number
          total: number
        }
      }
    }
  }
  '/users/totals': {
    get: {
      res: {
        /**
         * Get total position values for paginated set of users
         */
        200: {
          data: Array<UserTotalsPresenter>
          limit: number
          page: number
          total: number
        }
      }
    }
  }
  '/users/wallet/:wallet': {
    get: {
      res: {
        /**
         * Get single user by id
         */
        200: {
          api_key?: string | null
          created_at: string
          did?: string | null
          display_name?: string | null
          ens_name?: string | null
          id: string
          image?: string | null
          last_login?: string | null
          privy_id?: string | null
          role: Role
          updated_at: string
          wallet: string
        }
      }
    }
  }
  '/users/wallet/:wallet/private': {
    get: {
      res: {
        /**
         * Get single user by id
         */
        200: {
          api_key?: string | null
          created_at: string
          did?: string | null
          display_name?: string | null
          ens_name?: string | null
          id: string
          image?: string | null
          last_login?: string | null
          privy_id?: string | null
          role: Role
          updated_at: string
          wallet: string
        }
      }
    }
  }
}
